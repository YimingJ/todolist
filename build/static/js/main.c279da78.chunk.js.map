{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FormArea","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleClick","bind","assertThisInitialized","handleChange","e","setState","target","preventDefault","text","trim","id","count","AddTodoItem","complete","CountChange","alert","react_default","a","createElement","className","onChange","placeholder","type","onClick","React","Component","ListArea","_this2","CompleteMe","DeleteMe","handleTodo","backTodoTop","DeleteItem","CompleteItem","_this3","chooseValue","choosevalue","data","map","_ref","index","App_AppTodos","key","OnComplete","OnDelete","backTodo","AppTodos","_this4","handleDelete","handleComplete","handletodo","btn","AppFooter","_this5","handleNotComplete","OnNotComplete","App","_this6","OnAddTodoItem","OnCountChange","Complete","newItem","newData","concat","localStorage","setItem","JSON","stringify","newCount","slice","i","length","splice","item","console","log","App_FormArea","App_ListArea","App_AppFooter","Boolean","window","location","hostname","match","getItem","dataStr","parse","getData","getCount","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAEMA,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,MAAM,IACpBR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACnBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAJJA,4EAMLa,GACXV,KAAKW,SAAS,CAACN,MAAMK,EAAEE,OAAOP,4CAEpBK,GACVA,EAAEG,iBACF,IAAIC,EAAOd,KAAKI,MAAMC,MACtB,GAAIS,EAAKC,OAAT,CAIA,IAAIC,EAAKhB,KAAKJ,MAAMqB,MACpBjB,KAAKW,SAAS,CAACN,MAAM,KACrBL,KAAKJ,MAAMsB,YAAY,CAACF,KAAGF,OAAKK,UAAS,IACzCnB,KAAKJ,MAAMwB,YAAYJ,QANrBK,MAAM,yDASR,IAAMhB,EAAQL,KAAKI,MAAMC,MACzB,OACEiB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,SAAOnB,MAASA,EAAOqB,SAAU1B,KAAKS,aAAckB,YAAY,SAChEL,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASH,UAAU,SAASI,QAAS7B,KAAKM,aAAvD,eA3BawB,IAAMC,WAmCvBC,cACJ,SAAAA,EAAYpC,GAAM,IAAAqC,EAAA,OAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,IAChBC,EAAAnC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAA7B,KAAAH,KAAMJ,KACDsC,WAAaD,EAAKC,WAAW3B,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAmC,KAClBA,EAAKE,SAAWF,EAAKE,SAAS5B,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAmC,KAChBA,EAAKG,WAAaH,EAAKG,WAAW7B,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAmC,KAJFA,0EAMPjB,GACThB,KAAKJ,MAAMyC,YAAYrB,oCAEhBA,GACPhB,KAAKJ,MAAM0C,WAAWtB,sCAEbA,GACThB,KAAKJ,MAAM2C,aAAavB,oCAEhB,IAAAwB,EAAAxC,KACJyC,EAAczC,KAAKJ,MAAM8C,YACvBnB,EAAIvB,KAAKJ,MAAM+C,KAAKC,IAAI,SAAAC,EAAuBC,GAAU,IAA9B9B,EAA8B6B,EAA9B7B,GAAIF,EAA0B+B,EAA1B/B,KAAKK,EAAqB0B,EAArB1B,SACxC,OAAiB,IAAdsB,IAA8B,IAAXtB,EAEjBG,EAAAC,EAAAC,cAACuB,EAAD,CACIC,IAAKF,EACL9B,GAAIA,EACJF,KAAMA,EACNmC,WAAYT,EAAKN,WACjBgB,SAAUV,EAAKL,SACfM,YAAeA,EACfU,SAAYX,EAAKJ,aAGR,IAAdK,IAA8B,IAAXtB,EAEjBG,EAAAC,EAAAC,cAACuB,EAAD,CACIC,IAAKF,EACL9B,GAAIA,EACJF,KAAMA,EACNmC,WAAYT,EAAKN,WACjBgB,SAAUV,EAAKL,SACfM,YAAeA,EACfU,SAAYX,EAAKJ,aAIlB,OAIX,OACEd,EAAAC,EAAAC,cAAA,eAAQD,EAAR,YAjDiBO,IAAMC,WAsDvBqB,cACJ,SAAAA,EAAYxD,GAAM,IAAAyD,EAAA,OAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAoD,IAChBC,EAAAvD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsD,GAAAjD,KAAAH,KAAMJ,KACD0D,aAAeD,EAAKC,aAAa/C,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAuD,KACpBA,EAAKE,eAAiBF,EAAKE,eAAehD,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAuD,KACtBA,EAAKG,WAAaH,EAAKG,WAAWjD,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAuD,KAJFA,4EAOhBrD,KAAKJ,MAAMuD,SAASnD,KAAKJ,MAAMoB,2CAG/BhB,KAAKJ,MAAMsD,SAASlD,KAAKJ,MAAMoB,6CAG/B,IAAIA,EAAKhB,KAAKJ,MAAMoB,GACpBhB,KAAKJ,MAAMqD,WAAWjC,oCAGtB,IAAIyC,EAAM,KAcV,OAZEA,EAD0B,IAAzBzD,KAAKJ,MAAM6C,YACNnB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAExBI,QAAS7B,KAAKuD,gBAFR,aAMAjC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAExBI,QAAS7B,KAAKwD,YAFR,QAQNlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QACKC,UAAU,UAGVzB,KAAKJ,MAAMkB,MAKhB2C,EACAnC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAEZI,QAAS7B,KAAKsD,cAFpB,mBA/CaxB,IAAMC,WAyDvB2B,cACJ,SAAAA,EAAY9D,GAAM,IAAA+D,EAAA,OAAA7D,OAAAC,EAAA,EAAAD,CAAAE,KAAA0D,IAChBC,EAAA7D,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4D,GAAAvD,KAAAH,KAAMJ,KACDgE,kBAAoBD,EAAKC,kBAAkBrD,KAAvBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAA6D,KACzBA,EAAKJ,eAAiBI,EAAKJ,eAAehD,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAA6D,KAHNA,mFAMhB3D,KAAKJ,MAAMiE,yDAGX7D,KAAKJ,MAAMqD,8CAGX,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASC,QAAS7B,KAAK4D,mBAApC,aAGEtC,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASC,QAAS7B,KAAKuD,gBAApC,0BAnBczB,IAAMC,WA0Gf+B,cA/Eb,SAAAA,EAAYlE,GAAM,IAAAmE,EAAA,OAAAjE,OAAAC,EAAA,EAAAD,CAAAE,KAAA8D,IAChBC,EAAAjE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgE,GAAA3D,KAAAH,KAAMJ,KAURQ,MAAQ,CACNsC,YAAc,EACdC,KAAMoB,EAAKnE,MAAM+C,KACjB1B,MAAM8C,EAAKnE,MAAMqB,OAZjB8C,EAAKR,eAAeQ,EAAKR,eAAehD,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAiE,KACpBA,EAAKH,kBAAkBG,EAAKH,kBAAkBrD,KAAvBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAiE,KACvBA,EAAKC,cAAgBD,EAAKC,cAAczD,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAiE,KACrBA,EAAKE,cAAgBF,EAAKE,cAAc1D,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAiE,KACrBA,EAAKb,SAAWa,EAAKb,SAAS3C,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAiE,KAChBA,EAAKG,SAAWH,EAAKG,SAAS3D,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAiE,KAChBA,EAAKZ,SAAWY,EAAKZ,SAAS5C,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAiE,KARAA,6EAgBJI,GACZ,IAAIC,EAAUpE,KAAKI,MAAMuC,KAAK0B,OAAOF,GAErCnE,KAAKW,SAAS,CAACgC,KAAOyB,IACtBE,aAAaC,QAAQ,OAAOC,KAAKC,UAAUL,0CAE/BnD,GACZ,IAAIyD,EAAWzD,EAAM,EACrBjB,KAAKW,SAAS,CAACM,MAAMyD,IACrBJ,aAAaC,QAAQ,QAAQG,oCAEtB1D,GAEP,IADA,IAAIoD,EAAUpE,KAAKI,MAAMuC,KAAKgC,QACtBC,EAAG,EAAEA,EAAER,EAAQS,OAAOD,IACzBR,EAAQQ,GAAG5D,KAAKA,GACjBoD,EAAQU,OAAOF,EAAE,GAGrB5E,KAAKW,SAAS,CAACgC,KAAKyB,IACpBE,aAAaC,QAAQ,OAAOC,KAAKC,UAAUL,qCAEpCpD,GACP,IAAIoD,EAAUpE,KAAKI,MAAMuC,KAAKC,IAAI,SAACmC,GAIjC,OAHGA,EAAK/D,KAAKA,IACX+D,EAAK5D,UAAS,GAET4D,IAET/E,KAAKW,SAAS,CAACgC,KAAKyB,IACpBE,aAAaC,QAAQ,OAAOC,KAAKC,UAAUL,qCAEpCpD,GACP,IAAIoD,EAAUpE,KAAKI,MAAMuC,KAAKC,IAAI,SAACmC,GAIjC,OAHGA,EAAK/D,KAAKA,IACX+D,EAAK5D,UAAS,GAET4D,IAET/E,KAAKW,SAAS,CAACgC,KAAKyB,IACpBE,aAAaC,QAAQ,OAAOC,KAAKC,UAAUL,gDAG3CpE,KAAKW,SAAS,CAAC+B,YAAY,6CAG3B1C,KAAKW,SAAS,CAAC+B,YAAY,qCAEpB,IACCC,EAAS3C,KAAKI,MAAduC,KAER,OADAqC,QAAQC,IAAItC,GAEVrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAlB,gBAGAH,EAAAC,EAAAC,cAAC0D,EAAD,CAAUhE,YAAelB,KAAKgE,cAAe/C,MAAOjB,KAAKI,MAAMa,MAAOG,YAAapB,KAAKiE,gBACxF3C,EAAAC,EAAAC,cAAC2D,EAAD,CAAUxC,KAAQA,EAAMN,YAAarC,KAAKmD,SAAUb,WAAYtC,KAAKkD,SAAUX,aAAcvC,KAAKkE,SAAUxB,YAAa1C,KAAKI,MAAMsC,cACpIpB,EAAAC,EAAAC,cAAC4D,EAAD,CAAW1C,YAAa1C,KAAKI,MAAMsC,YAAamB,cAAiB7D,KAAK4D,kBAAmBX,WAAYjD,KAAKuD,yBA1EhGzB,IAAMC,WClKJsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZF,IAAI9C,EAeJ,WAEA,GAAI2C,OAAOhB,aAEN,CACD,IAAI3B,EAAK2B,aAAaoB,QAAQ,QAC9B,IAAI/C,EAAK,CACLA,EAAO,CAAC,CAAC3B,GAAI,EAAGF,KAAM,aAAaK,UAAS,IAC5C,IAAIwE,EAAUnB,KAAKC,UAAU9B,GAE7B,OADA2B,aAAaC,QAAQ,OAAOoB,GACrBhD,EAEX,OAAO6B,KAAKoB,MAAMjD,GATlBtB,MAAM,8CAlBCwE,GACP5E,EACJ,WACI,GAAIqE,OAAOhB,aAEN,CACD,IAAI3B,EAAK2B,aAAaoB,QAAQ,SAC9B,OAAI/C,EAKG6B,KAAKoB,MAAMjD,IAHd2B,aAAaC,QAAQ,QAAQ,GACtB5B,GANXtB,MAAM,8CAHFyE,GA8BhBC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,CAAKtD,KAAQA,EAAM1B,MAASA,IAAUiF,SAASC,eAAe,SDwFxE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c279da78.chunk.js","sourcesContent":["import React from 'react';\n\nclass FormArea extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {value:'',};\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e){\n    this.setState({value:e.target.value})\n  }\n  handleClick(e){\n    e.preventDefault();\n    let text = this.state.value;\n    if(!text.trim()){\n      alert('input cannot be null')\n      return\n    }\n    let id = this.props.count;\n    this.setState({value:''});\n    this.props.AddTodoItem({id,text,complete:false});\n    this.props.CountChange(id);\n  }\n  render(){\n    const value = this.state.value;\n    return(\n      <form className='form'>\n          <input value = {value} onChange={this.handleChange} placeholder='TODO'/>\n          <button type='submit' className='button' onClick={this.handleClick}>\n            ADD\n          </button>\n      </form>\n    )\n  }\n}\n\nclass ListArea extends React.Component{\n  constructor(props){\n    super(props);\n    this.CompleteMe = this.CompleteMe.bind(this);\n    this.DeleteMe = this.DeleteMe.bind(this);\n    this.handleTodo = this.handleTodo.bind(this);\n  }\n  handleTodo(id){\n    this.props.backTodoTop(id);\n  }\n  DeleteMe(id){\n    this.props.DeleteItem(id);\n  }\n  CompleteMe(id){\n    this.props.CompleteItem(id);\n  }\n  render () { \n    let chooseValue = this.props.choosevalue;\n    const a = this.props.data.map(({ id, text,complete}, index) => {\n      if(chooseValue===1 && complete===false){\n       return(  \n           <AppTodos \n               key={index} \n               id={id} \n               text={text} \n               OnComplete={this.CompleteMe}\n               OnDelete={this.DeleteMe}\n               chooseValue = {chooseValue}\n               backTodo = {this.handleTodo}\n             />\n       )\n      }if(chooseValue===2 && complete===true){\n        return(  \n            <AppTodos \n                key={index} \n                id={id} \n                text={text} \n                OnComplete={this.CompleteMe}\n                OnDelete={this.DeleteMe}\n                chooseValue = {chooseValue}\n                backTodo = {this.handleTodo}\n              />\n        )\n       }else {\n        return null;\n      }\n    })\n\n    return (\n      <div> { a } </div>\n    )\n  }\n}\n\nclass AppTodos extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleComplete = this.handleComplete.bind(this);\n    this.handletodo = this.handletodo.bind(this);\n  }\n  handletodo(){\n    this.props.backTodo(this.props.id);\n  }\n  handleDelete(){\n    this.props.OnDelete(this.props.id);\n  }\n  handleComplete(){\n    let id = this.props.id;\n    this.props.OnComplete(id);\n  }\n  render(){\n    let btn = null;\n    if(this.props.chooseValue===1){\n      btn = <button className='ui blue button'\n      // style={styles.delete} \n      onClick={this.handleComplete}>\n      COMPLETED\n</button>\n    }else{\n      btn = <button className='ui blue button'\n      // style={styles.delete} \n      onClick={this.handletodo}>\n      TODO\n</button>\n    }\n    return(\n      \n      <div className='comment'>\n        <div className='content'>\n        <hr></hr>\n          <span \n               className='author' \n                // style={styles.title} \n          >\n              {this.props.text}\n              {/* <span \n                   className={this.props.complete ? 'line' : ''} \n              /> */}\n          </span>\n         {btn}\n          <button className='ui blue button'\n                // style={styles.delete} \n                onClick={this.handleDelete}>\n                DELETE\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\nclass AppFooter extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleNotComplete = this.handleNotComplete.bind(this);\n    this.handleComplete = this.handleComplete.bind(this);\n  }\n  handleNotComplete(){\n    this.props.OnNotComplete();\n  }\n  handleComplete(){\n    this.props.OnComplete();\n  }\n  render(){\n    return(\n      <div>\n        <hr></hr>\n        <button type='submit' onClick={this.handleNotComplete}>\n            TODO List\n          </button>\n          <button type='submit' onClick={this.handleComplete}>\n            COMPLETED List\n          </button>\n      </div>\n    )\n  }\n}\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.handleComplete=this.handleComplete.bind(this);\n    this.handleNotComplete=this.handleNotComplete.bind(this);\n    this.OnAddTodoItem = this.OnAddTodoItem.bind(this);\n    this.OnCountChange = this.OnCountChange.bind(this);\n    this.OnDelete = this.OnDelete.bind(this);\n    this.Complete = this.Complete.bind(this);\n    this.backTodo = this.backTodo.bind(this);\n  }\n  \n  state = {\n    choosevalue : 1,\n    data: this.props.data,\n    count:this.props.count,\n  }\n  OnAddTodoItem(newItem){\n    let newData = this.state.data.concat(newItem);\n    // console.log(newData);\n    this.setState({data : newData});\n    localStorage.setItem(\"data\",JSON.stringify(newData));\n  }\n  OnCountChange(count){\n    let newCount = count+1;\n    this.setState({count:newCount});\n    localStorage.setItem(\"count\",newCount);\n  }\n  OnDelete(id){\n    let newData = this.state.data.slice();\n    for(let i =0;i<newData.length;i++){\n      if(newData[i].id===id){\n        newData.splice(i,1);\n      }\n    }\n    this.setState({data:newData});\n    localStorage.setItem(\"data\",JSON.stringify(newData));\n  }\n  backTodo(id){\n    let newData = this.state.data.map((item)=>{\n      if(item.id===id){\n        item.complete=false\n      }\n      return item;\n    })\n    this.setState({data:newData});\n    localStorage.setItem(\"data\",JSON.stringify(newData));\n  }\n  Complete(id){\n    let newData = this.state.data.map((item)=>{\n      if(item.id===id){\n        item.complete=true\n      }\n      return item;\n    })\n    this.setState({data:newData});\n    localStorage.setItem(\"data\",JSON.stringify(newData));\n  }\n  handleNotComplete(){\n    this.setState({choosevalue:1});\n  }\n  handleComplete(){\n    this.setState({choosevalue:2});\n  }\n  render() {\n    const { data } = this.state;\n    console.log(data);\n    return (\n      <div className=\"container\">\n        <header className=\"header\">\n          My TODO List\n        </header>\n        <FormArea AddTodoItem = {this.OnAddTodoItem} count={this.state.count} CountChange={this.OnCountChange} />\n        <ListArea data = {data} backTodoTop={this.backTodo} DeleteItem={this.OnDelete} CompleteItem={this.Complete} choosevalue={this.state.choosevalue}/>\n        <AppFooter choosevalue={this.state.choosevalue} OnNotComplete = {this.handleNotComplete} OnComplete={this.handleComplete}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n    let data = getData();\n    let count = getCount();\n    function getCount(){\n        if(!window.localStorage){\n            alert(\"浏览器支持localstorage\");\n        }else{\n            let data=localStorage.getItem(\"count\");\n            if(!data){\n                \n                localStorage.setItem(\"count\",1);\n                return data;\n            }\n            return JSON.parse(data);\n        }\n    }\n    function getData(){\n\n    if(!window.localStorage){\n        alert(\"浏览器支持localstorage\");\n    }else{\n        let data=localStorage.getItem(\"data\");\n        if(!data){\n            data = [{id: 0, text: 'welcome!!!',complete:false}];\n            let dataStr = JSON.stringify(data);\n            localStorage.setItem(\"data\",dataStr);\n            return data;\n        }\n        return JSON.parse(data);\n    }\n   }\n\nReactDOM.render(<App data = {data} count = {count}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}